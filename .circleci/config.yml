version: 2.1
orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2

jobs:
  build:
    docker:
      - image: cimg/ruby:2.6.6-node
    executor: ruby/default
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"

  test:
    docker:
      - image: cimg/ruby:2.6.6-node
      - image: circleci/postgres:12.7
        environment:
          POSTGRES_USER: psu_research_metadata_test
          POSTGRES_DB: psu_research_metadata_test
          POSTGRES_PASSWORD: "password"
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: psu_research_metadata_test
      PGPASSWORD: "password"
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Install phantomjs
          command: |
            sudo apt-get update
            sudo apt-get install fontconfig
            sudo mkdir -p /home/ubuntu/.phantomjs/2.1.1/x86_64-linux/bin
            sudo curl --output /home/ubuntu/.phantomjs/2.1.1/x86_64-linux/bin/phantomjs https://s3.amazonaws.com/circle-downloads/phantomjs-2.1.1
            sudo chmod ugo+x /home/ubuntu/.phantomjs/2.1.1/x86_64-linux/bin/phantomjs
            sudo ln -sf /home/ubuntu/.phantomjs/2.1.1/x86_64-linux/bin/phantomjs /usr/local/bin/phantomjs
            phantomjs --version
      - run:
          name: Install secrets config files
          command: |
            mv config/activity_insight.yml.ci config/activity_insight.yml
            mv config/azure_ad_oauth.yml.ci config/azure_ad_oauth.yml
            mv config/orcid.yml.ci config/orcid.yml
            mv config/pure.yml.ci config/pure.yml
            mv config/scholarsphere-client.yml.ci config/scholarsphere-client.yml
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run the unit tests
      - run:
          name: Unit Tests
          command: bin/rspec spec/unit

      # Run the component tests
      - run:
          name: Component Tests
          command: bin/rspec spec/component

      # Run the request tests
      - run:
          name: Request Tests
          command: bin/rspec spec/requests

      # Run the integration tests
      - run:
          name: Integration Tests
          command: bin/rspec spec/integration

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
