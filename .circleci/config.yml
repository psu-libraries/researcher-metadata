version: 2.1
orbs:
  docker: circleci/docker@2.8.2
  ruby: circleci/ruby@2.5.0
  node: circleci/node@7.1.0
  browser-tools: circleci/browser-tools@1.5.2

jobs:
  release:
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:v4.0.0
    environment:
      REGISTRY_HOST: harbor.k8s.libraries.psu.edu
      REGISTRY_REPO: library/researcher-metadata
      GITHUB_USER: 'psu-stewardship-bot'
      CONFIG_REPO: 'git@github.com:psu-libraries/researcher-metadata-config.git'
    steps:
      - add_ssh_keys
      - run:
          name: "Release"
          command: |
            /usr/local/bin/tag-image
            ssh-keyscan github.com > ~/.ssh/known_hosts
            git clone $CONFIG_REPO
            cd researcher-metadata-config
            ./bin/pr-release clusters/prod/manifests/researcher-metadata/prod.yaml

  deploy:
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:v4.0.0
    steps:
      - add_ssh_keys
      - run:
          name: "Update Config Repo"
          command: |
            ssh-keyscan github.com > ~/.ssh/known_hosts
            git clone git@github.com:psu-libraries/researcher-metadata-config.git
            cd researcher-metadata-config
            ./bin/generate_app

  publish:
    # executor:
    #   name: docker/docker
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:v4.0.0
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - docker/check:
          registry: harbor.k8s.libraries.psu.edu
      - run:
          name: Install Docker Buildx
          command: |
            mkdir -p ~/.docker/cli-plugin
            curl -fsSL "https://github.com/docker/buildx/releases/latest/download/buildx-linux-amd64" -o ~/.docker/cli-plugins/docker-build
            chmod +x ~/.docker/cli-plugins/docker-build
      - docker/build:
          image: library/researcher-metadata
          registry: harbor.k8s.libraries.psu.edu
          use-buildkit: true
          tag: "cache,$CIRCLE_SHA1"
          extra_build_args: "--target production"
      - docker/push:
          image: library/researcher-metadata
          registry: harbor.k8s.libraries.psu.edu
          tag: "$CIRCLE_SHA1"

  build:
    docker:
      - image: cimg/ruby:3.4.1-node
    executor: ruby/default
    steps:
      - checkout
      - ruby/install:
          version: '3.4.1'
      - ruby/install-deps
      - node/install:
          node-version: '22'
      - run: node --version

  test:
    docker:
      - image: cimg/ruby:3.1.6-browsers
      - image: cimg/postgres:12.7
        environment:
          POSTGRES_USER: psu_research_metadata_test
          POSTGRES_DB: psu_research_metadata_test
          POSTGRES_PASSWORD: "password"
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: psu_research_metadata_test
      PGPASSWORD: "password"
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - run: sudo apt-get update
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - checkout
      - ruby/install-deps
      - node/install:
          node-version: '22'
      - run: node --version
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Configure Rspec
          command: cp .rspec.ci .rspec
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      - run:
          name: Check current version of node
          command: node -v
      - run:
          name: Niftany
          command: bundle exec niftany
      - run:
          name: RSpec
          command: bundle exec rspec
      - run:
          name: Upload Coverage
          when: on_success
          command: |
            wget -q https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 -O cc-test-reporter
            chmod 755 cc-test-reporter
            export TAG=${CIRCLE_SHA1}
            export GIT_COMMIT_SHA=$CIRCLE_SHA1
            export GIT_BRANCH=$CIRCLE_BRANCH
            export GIT_COMMITED_AT=$(git log -1 --date=short --pretty=format:%ct)
            ./cc-test-reporter after-build -d

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - publish:
          context:
            - org-global
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
      - deploy:
          context: org-global
          requires:
          - publish
          - test
          filters:
            branches:
              only:
                - main
                - /preview\/.*/
      - release:
          context:
            - org-global
          name: "Release"
          filters:
            tags:
              only:
                - /^v\d+.\d+.\d+.*/
            branches:
              ignore:
                - /.*/
