version: 2.1
orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2
  browser-tools: circleci/browser-tools@1.4.0

jobs:
  build:
    docker:
      - image: cimg/ruby:3.1.2-node
    executor: ruby/default
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"

  test:
    docker:
      - image: cimg/ruby:3.1.2-browsers
      - image: circleci/postgres:12.7
        environment:
          POSTGRES_USER: psu_research_metadata_test
          POSTGRES_DB: psu_research_metadata_test
          POSTGRES_PASSWORD: "password"
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: psu_research_metadata_test
      PGPASSWORD: "password"
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - run:
          name: Install secrets config files
          command: |
            mv config/activity_insight.yml.ci config/activity_insight.yml
            mv config/azure_ad_oauth.yml.ci config/azure_ad_oauth.yml
            mv config/orcid.yml.ci config/orcid.yml
            mv config/pure.yml.ci config/pure.yml
            mv config/scholarsphere-client.yml.ci config/scholarsphere-client.yml
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      - run:
          name: Check current version of node
          command: node -v
      - run:
          name: Niftany
          command: bundle exec niftany
      - run:
          name: RSpec
          command: bundle exec rspec
      - run:
          name: Upload Coverage
          when: on_success
          command: |
            wget -q https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 -O cc-test-reporter
            chmod 755 cc-test-reporter
            export TAG=${CIRCLE_SHA1}
            export GIT_COMMIT_SHA=$CIRCLE_SHA1
            export GIT_BRANCH=$CIRCLE_BRANCH
            export GIT_COMMITED_AT=$(git log -1 --date=short --pretty=format:%ct)
            ./cc-test-reporter after-build -d

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
